{"version":3,"sources":["axios.js","components/Row.js","requests.js","components/Banner.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","req","data","results","fetchData","console","log","className","map","movie","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","then","url","release_date","urlParams","URLSearchParams","URL","search","catch","err","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","NavBar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b98dda5b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// base url to make requests to the movie database\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from \"../axios\";\r\nimport \"../styles/Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      const req = await axios.get(fetchUrl)\r\n      // console.log(\"this is the response req\", req.data.results)\r\n      setMovies(req.data.results);\r\n      return req;\r\n    }\r\n    fetchData()\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  //i need to get the release date which is movie.release_date\r\n\r\n  const handleClick = movie =>{\r\n    if(trailerUrl){\r\n      setTrailerUrl('');\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n      // && movie?.release_date\r\n      .then(url =>{\r\n          console.log('this is the release date', movie.release_date, movie.title, movie.name)\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'));\r\n      })\r\n      .catch(err => console.log('this is the error: ', err));\r\n    }\r\n  };\r\n\r\n  console.log(movies)\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {/* several row__posters */}\r\n        {movies.map((movie) =>(\r\n          <img\r\n          src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n          alt={movie.name}\r\n          className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n          key={movie.id}\r\n          onClick={() => handleClick(movie)}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n//save trailer url `b6li05zh3Kg`","const API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US` ,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213` ,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US` ,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28` ,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35` ,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27` ,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749` ,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99` \r\n}\r\nexport default requests;","import React, {useState, useEffect} from 'react';\r\nimport axios from \"../axios\";\r\nimport requests from \"../requests\";\r\nimport \"../styles/Banner.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      const req = await axios.get(requests.fetchNetflixOriginals);\r\n\r\n      setMovie(req.data.results[Math.floor(Math.random() * req.data.results.length -1)]);\r\n      return req;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  \r\n  //console.log(\"from banner here is movie\", movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n          ${base_url}${movie?.backdrop_path}\r\n        )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    > \r\n      <div className=\"banner__contents\">\r\n      <h1 className=\"banner__title\">\r\n        {movie?.title || movie?.name || movie?.original_name}\r\n      </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__btn\">Play</button>\r\n          <button className=\"banner__btn\">My List</button>\r\n        </div>\r\n      <h2 className=\"banner__description\">{truncate(movie?.overview, 200)}</h2>\r\n      </div>\r\n      <div className=\"banner__fadeBottom\"></div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useState, useEffect} from 'react'\r\nimport \"../styles/NavBar.css\";\r\n\r\nfunction NavBar() {\r\n  const [show, handleShow] = useState(false);\r\n  //a scroll event listener\r\n  useEffect(()=>{\r\n    window.addEventListener(\"scroll\", () =>{\r\n      if(window.scrollY > 100){\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`navigation ${show && \"nav__black\"}`}>\r\n      <img \r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1280px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img \r\n        className=\"nav__avatar\"\r\n        src=\"https://i.pinimg.com/originals/34/62/d2/3462d27440aa255b1c314ff16f4032b4.png\"\r\n        alt=\"Netflix Avatar\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import React from \"react\";\nimport Row from \"./components/Row\";\nimport Banner from \"./components/Banner\";\nimport NavBar from \"./components/NavBar\";\nimport requests from \"./requests\"\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Banner />\n      <Row\n      title=\"Netflix Originals\"\n      fetchUrl={requests.fetchNetflixOriginals}\n      isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n  <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}